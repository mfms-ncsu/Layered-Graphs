Options to get rid of and add/modify.

*** Reorganize ***

Consider runtime options that assume three stages: preprocessing (e.g., dfs), sorting (e.g., barycenter), and the main heuristic. The latter is determined not by the heuristic itself, but by its characteristics.

- cost function:
	max crossings for edges with given endpoint(s), as in mce
	total crossings
	something more sophisticated

- choice of vertex:
	by degree as in sifting
	max crossings edge or node
	best cost decrease
	whether or not to randomize in case of ties (clearly good for mce, mcn, sifting)

- other
	stopping criterion (time, iterations, lack of improvement)
	restart mechanism (not a priority, but could be bary or dfs)

*** Get rid of ***

- sifting variations (-s)
- the -g option; made obsolete by naming heuristics differently; but see above
- termination based on lack of improvement for barycenter variations

*** Modify ***

- an option to specify the desired objective(s), independent of heuristic, so that output focuses on those only; this would be independent of Pareto output; probably need to rethink output: currently best x is reported for all possible x and all stages

- output is not conducive to csv because each minimum or Pareto point comes with an iteration number that is reported on the same line; need to think in terms of a conversion script and/or separate lines for the iteration reports [* may be okay if important info comes immediately after separator (comma) *]

- the -z option does neighboring swaps until the total number of crossings is no longer decreased; how about changing that so that we stop swapping only when the desired objective(s) show no improvement

*** Add ***

- some heuristics designed to randomize the order; useful when doing a chain of runs, which currently get stuck; could use existing heuristics as a model
   * a variant of mod_bary where the first layer in each pass is given random weights; can be done each time the max crossings layer is chosen or just once per pass
   * a sifting heuristic where each iteration swaps the target node with a random node on its layer

(* done *) - facilities for reading and writing sgf files; the program would base the I/O method on the extension(s) of the input file(s); still to do

   * read and store sgf comments
   * allow standard input for sgf with '-' instead of file name
   * sgf output where an ord file is written (if sgf input was used)
   * allow standard output to be specified (not clear what the convention should be)

- ability to have positions that are not consecutive on a layer, in order to be able to minimize non-verticality, both directly and as a Pareto option

- a variant of barycenter that takes non-consecutive positions into account; here the new positions would be "as close as possible" to the computed averages (Terri may have started something like this)

- the new barycenter variant might coincidentally be a good heuristic for minimizing total crossings, at least in some situations

- a mnv heuristic, similar to mce, that chooses an edge with maximum non-verticality and minimizes the non-verticality of edges incident on its endpoints

*** Implementation notes ***

For heuristics it would be good to have an array of structs, each entry has a heuristic name, pointer to the corresponding function, iterations, and time limit; the latter two are left unspecified. Suppose that the user specifies options
       -h bary,mce -i 1000,_ -r _,10
Then the program would
    - search the array to find the "bary" entry
    - copy the struct, filling in the iteration field with 1000
    - run barycenter consulting the current struct for runtime and iterations
    - repeat the process for "mce" using the same global variable for the copy

----------------------------------------
Code to examine/modify

anywhere the position attribute of a node is initialized or updated

anywhere the index of a node in its layer array is initialized or updated; it's not clear whether this needs to be consistent with the position attribute; perhaps the layer array merely serves as a list

no_improvement() should focus on specific objectives; actually this is hardly used since all heuristics improve various objectives beyond the point where the current iteration may fail to do so

-----------------------------------------
Issues that need to be addressed

- other places where node->position is altered
        - restore_order() in order.c, to recreate a specific ordering for, e.g., output or the next stage
        - in reposition_node() in sifting.c, to put a node into a new position and shift other nodes left or right as needed; not clear that sifting would be useful for verticality, unless a special variant is created (move each chosen node into its most vertical position)
        - there are lots of places various heuristics rely on node->position, but ...

Best strategy may be to have a flag alerting the software that verticality is to be optimized, and either disable position-based heuristics or invoke variants.

The current software is clunky in that it tracks several objectives throughout, instead of just one (two in case of Pareto optimization). Better to specify one or two objectives up front and completely ignore the rest.

